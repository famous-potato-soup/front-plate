{"version":3,"sources":["components/OAuthLogin.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["fbKey","process","REACT_APP_FACEBOOK_KEY","Login","useCookies","setCookie","appId","autoLoad","fields","callback","response","icon","withCookies","cookie","removeCookie","className","user","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAMMA,EAAaC,8CAAYC,uBAkBhBC,EAhBU,WAAO,IAAD,EACDC,YAAW,CAAC,SADX,mBACdC,GADc,WAK7B,OACE,kBAAC,IAAD,CACEC,MAAON,EACPO,UAAU,EACVC,OAAO,qBACPC,SARwB,SAACC,GAC3BL,EAAU,OAAQK,IAQhBC,KAAK,wBCEIC,eAdO,WAAO,IAAD,EACKR,YAAW,CAAC,SADjB,mBACnBS,EADmB,KACXC,EADW,KAK1B,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACfF,EAAOG,KAAO,4BAAQC,QAN7B,WACEH,EAAa,OAAQ,MAKF,4BAAmD,kBAAC,EAAD,WCHtDI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCTnCC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.79892ef1.chunk.js","sourcesContent":["import React from 'react';\n\nimport { useCookies } from 'react-cookie';\n\nimport FacebookLogin from 'react-facebook-login';\n\nconst fbKey: any = process.env.REACT_APP_FACEBOOK_KEY;\n\nconst Login: React.SFC = () => {\n  const [cookie, setCookie] = useCookies(['user']);\n  const handleFacebookLogin = (response: any): void => {\n    setCookie('user', response);\n  };\n  return (\n    <FacebookLogin\n      appId={fbKey} // facebook developer 페이지에 생성한 앱의 아이디\n      autoLoad={false}\n      fields=\"name,email,picture\" // 페이스북에서 가져올 필드\n      callback={handleFacebookLogin} // 콜백함수 지정( container에 생성 )\n      icon=\"fa-facebook-square\" // 아이콘 지정\n    />\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport './App.css';\n\nimport { withCookies, useCookies } from 'react-cookie';\n\nimport FacebookLogin from './OAuthLogin';\n\nconst App: React.FC = () => {\n  const [cookie, removeCookie] = useCookies(['user']);\n  function removeUserCookie(): void {\n    removeCookie('user', '');\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {cookie.user ? <button onClick={removeUserCookie}>로그아웃</button> : <FacebookLogin />}\n      </header>\n    </div>\n  );\n};\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(\n  <CookiesProvider>\n    <App />\n  </CookiesProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}